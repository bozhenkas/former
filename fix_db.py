import asyncio
import os
from motor.motor_asyncio import AsyncIOMotorClient
from dotenv import load_dotenv

load_dotenv()

async def fix_database():
    client = AsyncIOMotorClient(os.getenv("MONGO_URI", "mongodb://localhost:27017/former"))
    db = client.get_database()
    
    print("üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    print("=" * 50)
    
    try:
        # 1. –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∏–Ω–¥–µ–∫—Å—ã
        print("üìä –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤:")
        
        # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å –Ω–∞ tg_id –≤ users
        try:
            await db.users.create_index("tg_id", unique=True)
            print("  ‚úÖ –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å –Ω–∞ tg_id –≤ users —Å–æ–∑–¥–∞–Ω")
        except Exception as e:
            print(f"  ‚ö†Ô∏è  –ò–Ω–¥–µ–∫—Å –Ω–∞ tg_id —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –æ—à–∏–±–∫–∞: {e}")
        
        # –ò–Ω–¥–µ–∫—Å –Ω–∞ webhook_token –≤ integrations
        try:
            await db.integrations.create_index("webhook_token", unique=True)
            print("  ‚úÖ –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å –Ω–∞ webhook_token –≤ integrations —Å–æ–∑–¥–∞–Ω")
        except Exception as e:
            print(f"  ‚ö†Ô∏è  –ò–Ω–¥–µ–∫—Å –Ω–∞ webhook_token —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –æ—à–∏–±–∫–∞: {e}")
        
        # –ò–Ω–¥–µ–∫—Å –Ω–∞ user_tg_id –≤ google_accounts (–µ—Å–ª–∏ –Ω–µ—Ç)
        try:
            await db.google_accounts.create_index("user_tg_id")
            print("  ‚úÖ –ò–Ω–¥–µ–∫—Å –Ω–∞ user_tg_id –≤ google_accounts —Å–æ–∑–¥–∞–Ω")
        except Exception as e:
            print(f"  ‚ö†Ô∏è  –ò–Ω–¥–µ–∫—Å –Ω–∞ user_tg_id —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –æ—à–∏–±–∫–∞: {e}")
        
        print()
        
        # 2. –û—á–∏—â–∞–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        print("üßπ –û—á–∏—Å—Ç–∫–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:")
        
        # –£–¥–∞–ª—è–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –±–µ–∑ Google –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        integrations_without_google = []
        async for integration in db.integrations.find():
            google_account = await db.google_accounts.find_one({"_id": integration.get("google_account_id")})
            if not google_account:
                integrations_without_google.append(integration["_id"])
        
        if integrations_without_google:
            result = await db.integrations.delete_many({"_id": {"$in": integrations_without_google}})
            print(f"  üóëÔ∏è  –£–¥–∞–ª–µ–Ω–æ {result.deleted_count} –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π –±–µ–∑ Google –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
        else:
            print("  ‚úÖ –í—Å–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∏–º–µ—é—Ç —Å–≤—è–∑–∞–Ω–Ω—ã–µ Google –∞–∫–∫–∞—É–Ω—Ç—ã")
        
        # –£–¥–∞–ª—è–µ–º form_responses –±–µ–∑ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π
        responses_without_integration = []
        async for response in db.form_responses.find():
            integration = await db.integrations.find_one({"_id": response.get("integration_id")})
            if not integration:
                responses_without_integration.append(response["_id"])
        
        if responses_without_integration:
            result = await db.form_responses.delete_many({"_id": {"$in": responses_without_integration}})
            print(f"  üóëÔ∏è  –£–¥–∞–ª–µ–Ω–æ {result.deleted_count} –æ—Ç–≤–µ—Ç–æ–≤ –±–µ–∑ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π")
        else:
            print("  ‚úÖ –í—Å–µ –æ—Ç–≤–µ—Ç—ã –∏–º–µ—é—Ç —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏")
        
        print()
        print("‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –ë–î: {e}")
    finally:
        client.close()

if __name__ == "__main__":
    asyncio.run(fix_database()) 